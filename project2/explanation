PROBLEM 1:

The LRU Cache problem is implemented based on Python's built-in data structure 'Dictionary' and custom implemetation of
'Queue' which is based on 'LinkedList' data structure. The given solution provides two methods:
    'get' - returns value by the given key if exists othervise it returns -1
and
    'set' - inserts the given key/value pair into a dictionary or updates the value if the key is already exists

Since we are operating with immutable data type, integer value, the hash function for this object is
sufficiently robust to make collisions. Therefore the time complexity of these two operations are O(1). Internal
operations of the Queue: enqueue, dequeue and remove operate on next and previous references of the Node object and each
of this operation takes constant time O(1). The space complexity takes O(n), but we are storing values twice, in dict
and queue.


PROBLEM 2:

The Finding Files problem is implemented with recursion. From the given path we have to visit each folder, on each folder
we keep the files that match the given suffix and we keep going deeper on the folder structure by launching subsequent
calls to the function. The function call exits from the call stack if there are no files and folders on the current path.
The function returns collected files and exits from the call stack if there is no folder.

The time complexity depends on the number of iterations that are launched, in this case it depends on depth and width
of the folders. So, the time complexity is O(d*w). The space complexity depends on number of returns the function does,
it is the number of found files, O(f).


PROBLEM 3:

The Huffman Coding problem is implemented based on heapq, Python's built-in Heap Queue algorithm (a.k.a. priority queue).
The Node class is used for representing our data, which consist of characters, its frequencies, left and right nodes. To
compare nodes in a heap the following methods: __lt__ and __eq__  are overridden.

To calculate characters' frequencies in a text get_frequency function is used. By traversing each character in a text we
store it as a key and increment the number of occurrence as a value in dictionary. The time and space complexity for this
operation takes O(n).

The create_heap function is used for creating a priority queue. For each element of the dictionary we create a Node
object and push it into a heap. Python's built-in heapq takes O(logn) time for push and pop operations and O(nlogn)
for sorting. The time complexity of the create_heap function is O(nlogn) and O(n) for the space complexity.

The merge_nodes function is used for creating a tree. It iterates over a heap elements until there is only one element
is left. It pops two nodes from the heap, sums their frequencies, creates a new node with sum of frequencies, adds
those nodes as its left and right children and push it back to the heap. The time and space complexity of this function
is O(n).

The binaryze function is used for generating a code for each character in the tree, placing a o if traverses to the left
or 1 to the right. It returns a dictionary of the generated code, the time and space complexity of the function is O(n).

The reverse function is used for reversing a dictionary of the generated codes. It takes O(n) for time and space
complexity.

The huffman_encoding function consists of the other mentioned functions for encoding and it takes O(nlogn) time.

The huffman_decoding function decodes encoded text by using reversed codes, it iterates over encoded text and finds
characters. The time and space complexity of this function is O(n).


PROBLEM 4:

The Active Directory problem is implemented with recursion. The function takes two parameters, user and group. For the
given group we firstly check if the given user exists in group's user list, for this check we use 'in' operator, in
average case it takes O(n) times. If the given user in a list we return true otherwise we iterate over the groups of the
given group and for each sub_group we call our function (recursively) by passing the user and sub_group.

The time complexity depends on the number of iterations that are launched, in case if the user exist in the user
list of the given group, it will take O(n) time. Otherwise it may take O(n*depth_of_the_group). The space complexity is
O(1), since we get two parameters as references and return True/False depending on the condition.


PROBLEM 5:

The Blockchain problem is implemented based on LinkedList data structure. Each block is added into the end of the chain.
The add() operation takes O(1) constant time. There is a find() operation for searching a block in the chain. The find
operation uses to_list() method, which takes O(n) time and space to create a list and it iterates over this list to find
a block. In general this operation will take O(2n) which is O(n) time. The find operation would be efficient if we
iterate over the linked list itself. For the space complexity it takes O(n).


PROBLEM 6:

The Union and Intersection problem is implemented based on custom solution and Python's built-in List data structure.
Since, Python's Set is unordered type I have decided not to use it even though it simplifies problem's implementation.
For this problem I've added to_list() method to convert linkedlist into a list, time complexity of this operation is O(n).
The union operation takes O(n^2) time to produce a result. It iterates over combined list, which takes O(n) time and
appends item into a linkedlist if it's not exist, the contains operation takes O(n) time. The space complexity is O(n).
The intersection operation takes O(n^3) time, since it uses two nested loop and contains operation, which takes O(n)
time. The space complexity is O(n).
If the problem solution was based on Set data structure the union operation would take in average case O(len(s) + len(t))
and the intersection operation would take O(len(s) * len(t)) time in worst case.
