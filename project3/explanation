PROBLEM 1:

Finding Square Root of an Integer problem is implemented with binary search algorithm. To find a square root of the
given number we iterate from start (zero) to end (the given number) and on each iteration we find a middle, get its
power and compare with the given number. If the power of the middle value is equal to the given number we return the
middle value, otherwise we move to the left (start to middle) or right (middle to end) half and continue iteration.
In each iteration, half of the values is eliminated from the search. Its runtime complexity is O(logn) and space
complexity is O(1).


PROBLEM 2:

Search in a Rotated Sorted Array problem is based on recursion and binary search algorithm is applied to its implementation.
On each recursive call we find middle value of the given array and compare it with target number, if they are equal we
return middle position of the value, otherwise we search the left half of the array and if found return the value's
position or search the right half of the array, and if there is no value we return -1. Since we eliminate half of the
values on each iteration the runtime complexity is O(logn). The space taken by the algorithm is the same for any number
of elements in the array and its complexity is O(1).


PROBLEM 3:

The Rearrange Array Elements problem is implemented with max heap data structure. Firstly we iterate over array and
insert each element into a heap, insertion operation takes O(logn) time. Afterwards, traverse the heap and construct
the 2 numbers. On each odd step we remove element from the heap and append returned value to first_number, on each even
step we remove element from the heap and append its returned value to second_number. The remove operation in heap takes
O(logn) time. When iteration is over we return these two numbers ([first_number, second_number]). The runtime complexity
is O(nlogn). The space complexity is O(n), since each element of the given array was added into a heap.
space.


PROBLEM 4:

The Dutch National Flag Problem sorts array which consist of 0, 1 and 2 in a single traversal. The algorithm swaps items
0 and 2 to their correct positions and by this swapping all 1 are automatically placed in their right positions too.
Since we are traversing array once the time complexity is O(n) and swapping is done in-array the space complexity is O(1)


PROBLEM 5:

The Autocomplete with Tries problem is focused on implementation of Trie data structure. It is basedd on TrieNode and
Trie classes. The TrieNode class has following attributes:
    is_word - a boolean value which indicates the end of word
    children - a Python's defaultdict with the character as the key and a pointer to the child TrieNode as the value

The TrieNode class has suffixes(suffix) method to find suffixes. It traverses tree recursively and add suffix to the
resulting list if the end of word is matched.

The Trie class has the following attribute:
    root - a TrieNode value which indicates the the root node in a tree.

The Trie class has insert(word), find(prefix) and exists(word) methods. To insert a word we iterate over word's
characters and add them one by one and after that we indicate that chain of characters is a word. The find method
iterates over word's character one by one and checks if the character exists in node's children, if it does not exist
this method returns None, otherwise it goes through all nodes and returns the node as a search result. The exists method
is similar to find method but it returns True or False as a result.

For lookup, the worst case runtime complexity is O(n), where n is the number of characters in the word. Space complexity
is O(n) since each character represents a node in a tree.


PROBLEM 6:

The Max and Min in a Unsorted Array problem required to find min and max values in linear time, O(n). So, first we define
first element as min value and last element as max value by default. After that we iterate over the array and compare
each value with min and max values and update their values accordingly. When iteration is completed we return min and max
values.
The space complexity is constant and takes O(1) space.


PROBLEM 7:

The HTTPRouter using a Trie problem is similar to problem 5, except for the edge cases like "root handler" and working
with a hierarchy of web pages instead of strings. The focus of this problem is implementing Trie data structure which is
suited for a good ratio between time and space complexity.
The finding and inserting operations take O(n) time. For space complexity it takes O(n).